{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Sirius Router": {
		"scope": "javascript,typescript",
		"prefix": "sr-route",
		"body": [
			"import express from 'express';",
			"import ModelFactoryInterface from '../models/typings/ModelFactoryInterface';",
			"import { Routes } from './typings/RouteInterface';",
			"import { OkResponse } from './typings/BodyBuilderInterface';",
			"",
			"const route: Routes = (app: express.Application, models: ModelFactoryInterface): express.Router => {",
			"    const router: express.Router = express.Router();",
			"",
			"    return router;",
			"}",
			"",
			"export default route"
		]
	},
	"Sirius Model": {
		"scope": "javascript,typescript",
		"prefix": "sr-model",
		"body": [
			"import Sequelize from 'sequelize';",
			"import { Factory } from './typings/ModelInterface';",
			"import { SequelizeAttributes } from './typings/SequelizeAttributes';",
			"import ModelFactoryInterface from './typings/ModelFactoryInterface';",
			"",
			"export interface $1Attributes {",
			"",
			"}",
			"",
			"export interface $1Instance extends Sequelize.Instance<$1Attributes>, $1Attributes {",
			"",
			"}",
			"",
			"export const $1Factory: Factory<$1Instance, $1Attributes> = (sequelize: Sequelize.Sequelize, DataTypes: Sequelize.DataTypes): Sequelize.Model<$1Instance, $1Attributes> => {",
			"    const attributes: SequelizeAttributes<$1Attributes> = {",
			"        ",
			"    }",
			"    const $1: Sequelize.Model<$1Instance, $1Attributes> = sequelize.define<$1Instance, $1Attributes>(",
			"        '$2',",
			"        attributes,",
			"        { underscored: true } ",
			"    );",
			"",
			"    $1.associate = (models: ModelFactoryInterface): void => {",
			"",
			"    }",
			"",
			"    return $1;",
			"}"
		]
	},
	"Sirius Validation Schema": {
		"scope": "javascript,typescript",
		"prefix": "sr-valid",
		"body": [
			"import express from 'express';",
			"import { checkSchema } from 'express-validator/check';",
			"import wrapValidation from '../middlewares/validation/request';",
			"",
			"export const $1: express.Handler[] = wrapValidation(checkSchema({",
			"",
			"}));"
		]
	}
}